{
    "$id": "https://raw.githubusercontent.com/twelvelabs/stamp/main/docs/stamp.schema.json",
    "$schema": "https://json-schema.org/draft-07/schema",
    "title": "Generator",
    "description": "Stamp generator metadata.",
    "definitions": {
        "Action": {
            "title": "Action",
            "description": "Determines what type of modification to perform.\n\nThe append/prepend behavior differs slightly depending on\nthe destination content type. Strings are concatenated,\nnumbers are added, and objects are recursively merged.\nArrays are concatenated by default, but that behavior can\nbe customized via the 'merge' enum.\n\nReplace and delete behave consistently across all types.",
            "enum": [
                "append",
                "prepend",
                "replace",
                "delete"
            ],
            "type": "string",
            "enumDescriptions": [
                "Append to the destination content.",
                "Prepend to the destination content.",
                "Replace the destination.",
                "Delete the destination content."
            ],
            "markdownDescription": "Determines what type of modification to perform.\n\nThe append/prepend behavior differs slightly depending on\nthe destination content type. Strings are concatenated,\nnumbers are added, and objects are recursively merged.\nArrays are concatenated by default, but that behavior can\nbe customized via the 'merge' enum.\n\nReplace and delete behave consistently across all types."
        },
        "ConflictConfig": {
            "title": "ConflictConfig",
            "description": "Determines what to do when creating a new file and\nthe destination path already exists.\n\n_Only used in [CreateTask](create_task.md#createtask)._",
            "enum": [
                "keep",
                "replace",
                "prompt"
            ],
            "type": "string",
            "enumDescriptions": [
                "Keep the existing path.",
                "Replace the existing path.",
                "Prompt the user."
            ],
            "markdownDescription": "Determines what to do when creating a new file and\nthe destination path already exists.\n\n_Only used in [CreateTask](create_task.md#createtask)._"
        },
        "CreateTask": {
            "title": "CreateTask",
            "description": "Creates a new file in the destination directory.",
            "required": [
                "dst",
                "src",
                "type"
            ],
            "additionalProperties": false,
            "properties": {
                "dst": {
                    "$ref": "#/definitions/Destination",
                    "title": "Destination"
                },
                "each": {
                    "title": "Each",
                    "description": "Set to a comma separated value and the task will be executued once per-item. On each iteration, the `_Item` and `_Index` values will be set accordingly.",
                    "examples": [
                        "foo, bar, baz",
                        "{{ .SomeList | join \",\" }}"
                    ],
                    "type": "string",
                    "markdownDescription": "Set to a comma separated value and the task will be executued once per-item. On each iteration, the `_Item` and `_Index` values will be set accordingly."
                },
                "if": {
                    "title": "If",
                    "description": "Determines whether the task should be executed. The value must be [coercible](https://pkg.go.dev/strconv#ParseBool) to a boolean.",
                    "default": "true",
                    "examples": [
                        "0",
                        "true",
                        "{{ .SomeBool }}"
                    ],
                    "type": "string",
                    "markdownDescription": "Determines whether the task should be executed. The value must be [coercible](https://pkg.go.dev/strconv#ParseBool) to a boolean."
                },
                "src": {
                    "$ref": "#/definitions/Source",
                    "title": "Source"
                },
                "type": {
                    "title": "Type",
                    "description": "Creates a new file in the destination directory.",
                    "const": "create",
                    "type": "string",
                    "markdownDescription": "Creates a new file in the destination directory."
                }
            },
            "type": "object",
            "markdownDescription": "Creates a new file in the destination directory."
        },
        "DataType": {
            "title": "DataType",
            "description": "Specifies the data type of a value.",
            "enum": [
                "bool",
                "int",
                "intSlice",
                "string",
                "stringSlice"
            ],
            "type": "string",
            "enumDescriptions": [
                "Boolean.",
                "Integer.",
                "Integer array/slice.",
                "String.",
                "String array/slice."
            ],
            "markdownDescription": "Specifies the data type of a value."
        },
        "DeleteTask": {
            "title": "DeleteTask",
            "description": "Deletes a file in the destination directory.",
            "required": [
                "dst",
                "type"
            ],
            "additionalProperties": false,
            "properties": {
                "dst": {
                    "$ref": "#/definitions/Destination",
                    "title": "Destination"
                },
                "each": {
                    "title": "Each",
                    "description": "Set to a comma separated value and the task will be executued once per-item. On each iteration, the `_Item` and `_Index` values will be set accordingly.",
                    "examples": [
                        "foo, bar, baz",
                        "{{ .SomeList | join \",\" }}"
                    ],
                    "type": "string",
                    "markdownDescription": "Set to a comma separated value and the task will be executued once per-item. On each iteration, the `_Item` and `_Index` values will be set accordingly."
                },
                "if": {
                    "title": "If",
                    "description": "Determines whether the task should be executed. The value must be [coercible](https://pkg.go.dev/strconv#ParseBool) to a boolean.",
                    "default": "true",
                    "examples": [
                        "0",
                        "true",
                        "{{ .SomeBool }}"
                    ],
                    "type": "string",
                    "markdownDescription": "Determines whether the task should be executed. The value must be [coercible](https://pkg.go.dev/strconv#ParseBool) to a boolean."
                },
                "type": {
                    "title": "Type",
                    "description": "Deletes a file in the destination directory.",
                    "const": "delete",
                    "type": "string",
                    "markdownDescription": "Deletes a file in the destination directory."
                }
            },
            "type": "object",
            "markdownDescription": "Deletes a file in the destination directory."
        },
        "Destination": {
            "title": "Destination",
            "description": "The destination path.",
            "required": [
                "path"
            ],
            "additionalProperties": false,
            "properties": {
                "conflict": {
                    "$ref": "#/definitions/ConflictConfig",
                    "title": "Conflict",
                    "default": "prompt"
                },
                "content_type": {
                    "title": "Content Type",
                    "description": "An explicit content type. Inferred from the file extension by default.",
                    "enum": [
                        "json",
                        "yaml",
                        "text"
                    ],
                    "type": "string",
                    "markdownDescription": "An explicit content type. Inferred from the file extension by default."
                },
                "missing": {
                    "$ref": "#/definitions/MissingConfig",
                    "title": "Missing",
                    "default": "ignore"
                },
                "mode": {
                    "title": "Mode",
                    "description": "An optional [POSIX mode](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation) to set on the file path.",
                    "default": "0666",
                    "examples": [
                        "0755",
                        "{{ .ModeValue }}"
                    ],
                    "pattern": "\\{\\{(.*)\\}\\}|\\d{4}",
                    "type": "string",
                    "markdownDescription": "An optional [POSIX mode](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation) to set on the file path."
                },
                "path": {
                    "title": "Path",
                    "description": "The file path relative to the destination directory. Attempts to traverse outside the destination directory will raise a runtime error",
                    "type": "string",
                    "markdownDescription": "The file path relative to the destination directory. Attempts to traverse outside the destination directory will raise a runtime error"
                }
            },
            "type": "object",
            "markdownDescription": "The destination path."
        },
        "FileType": {
            "title": "FileType",
            "description": "Specifies the content type of the destination path.",
            "enum": [
                "json",
                "yaml",
                "text"
            ],
            "type": "string",
            "enumDescriptions": [
                "",
                "",
                ""
            ],
            "markdownDescription": "Specifies the content type of the destination path."
        },
        "GeneratorTask": {
            "title": "GeneratorTask",
            "description": "Executes another generator.",
            "additionalProperties": false,
            "properties": {
                "each": {
                    "title": "Each",
                    "description": "Set to a comma separated value and the task will be executued once per-item. On each iteration, the `_Item` and `_Index` values will be set accordingly.",
                    "examples": [
                        "foo, bar, baz",
                        "{{ .SomeList | join \",\" }}"
                    ],
                    "type": "string",
                    "markdownDescription": "Set to a comma separated value and the task will be executued once per-item. On each iteration, the `_Item` and `_Index` values will be set accordingly."
                },
                "if": {
                    "title": "If",
                    "description": "Determines whether the task should be executed. The value must be [coercible](https://pkg.go.dev/strconv#ParseBool) to a boolean.",
                    "default": "true",
                    "examples": [
                        "0",
                        "true",
                        "{{ .SomeBool }}"
                    ],
                    "type": "string",
                    "markdownDescription": "Determines whether the task should be executed. The value must be [coercible](https://pkg.go.dev/strconv#ParseBool) to a boolean."
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "description": "Executes another generator.",
                    "const": "generator",
                    "type": "string",
                    "markdownDescription": "Executes another generator."
                },
                "values": {
                    "default": {},
                    "additionalProperties": {},
                    "type": [
                        "object",
                        "null"
                    ]
                }
            },
            "type": "object",
            "markdownDescription": "Executes another generator."
        },
        "InputMode": {
            "title": "InputMode",
            "description": "Determines how the value is input on the command line.",
            "enum": [
                "arg",
                "flag",
                "hidden"
            ],
            "type": "string",
            "enumDescriptions": [
                "Passed as a positional argument.",
                "Passed as a flag.",
                "Read-only from the `default` value."
            ],
            "markdownDescription": "Determines how the value is input on the command line."
        },
        "MatchSource": {
            "title": "MatchSource",
            "description": "Determines how regexp patterns should be applied.",
            "enum": [
                "file",
                "line"
            ],
            "type": "string",
            "enumDescriptions": [
                "Match the entire file.",
                "Match each line."
            ],
            "markdownDescription": "Determines how regexp patterns should be applied."
        },
        "MergeType": {
            "title": "MergeType",
            "description": "Determines merge behavior for arrays - either when modifying them directly\nor when recursively merging objects containing arrays.",
            "enum": [
                "concat",
                "upsert",
                "replace"
            ],
            "type": "string",
            "enumDescriptions": [
                "Concatenate source and destination arrays.",
                "Add source array items if not present in the destination.",
                "Replace the destination with the source."
            ],
            "markdownDescription": "Determines merge behavior for arrays - either when modifying them directly\nor when recursively merging objects containing arrays."
        },
        "MissingConfig": {
            "title": "MissingConfig",
            "description": "Determines what to do when updating an existing file and\nthe destination path is missing.\n\n_Only used in [UpdateTask](update_task.md#updatetask)._",
            "enum": [
                "ignore",
                "touch",
                "error"
            ],
            "type": "string",
            "enumDescriptions": [
                "Do nothing.",
                "Create an empty file.",
                "Raise an error."
            ],
            "markdownDescription": "Determines what to do when updating an existing file and\nthe destination path is missing.\n\n_Only used in [UpdateTask](update_task.md#updatetask)._"
        },
        "PromptConfig": {
            "title": "PromptConfig",
            "description": "Determines when a value should prompt for input.",
            "enum": [
                "always",
                "never",
                "on-empty",
                "on-unset"
            ],
            "type": "string",
            "enumDescriptions": [
                "Always prompt.",
                "Never prompt.",
                "Only when input OR default is blank/zero.",
                "Only when not explicitly set via CLI."
            ],
            "markdownDescription": "Determines when a value should prompt for input."
        },
        "Source": {
            "title": "Source",
            "description": "The source path or inline content.",
            "type": "object",
            "oneOf": [
                {
                    "$ref": "#/definitions/SourceWithContent"
                },
                {
                    "$ref": "#/definitions/SourceWithPath"
                }
            ],
            "markdownDescription": "The source path or inline content."
        },
        "SourceWithContent": {
            "title": "Source Content",
            "description": "The source content.",
            "required": [
                "content"
            ],
            "additionalProperties": false,
            "properties": {
                "content": {
                    "title": "Content",
                    "description": "Inline content. Can be any type. String keys and/or values will be rendered as templates.",
                    "examples": [
                        "{{ .ValueOne }}",
                        [
                            "{{ .ValueOne }}",
                            "{{ .ValueTwo }}"
                        ],
                        {
                            "foo": "{{ .ValueOne }}"
                        }
                    ],
                    "markdownDescription": "Inline content. Can be any type. String keys and/or values will be rendered as templates."
                },
                "content_type": {
                    "$ref": "#/definitions/FileType",
                    "title": "Content Type"
                }
            },
            "type": "object",
            "markdownDescription": "The source content."
        },
        "SourceWithPath": {
            "title": "Source Path",
            "description": "The source path.",
            "required": [
                "path"
            ],
            "additionalProperties": false,
            "properties": {
                "content_type": {
                    "$ref": "#/definitions/FileType",
                    "title": "Content Type"
                },
                "path": {
                    "title": "Path",
                    "description": "The file path relative to the generator source directory (./\\_src). Attempts to traverse outside the source directory will raise a runtime error.",
                    "type": "string",
                    "markdownDescription": "The file path relative to the generator source directory (./\\_src). Attempts to traverse outside the source directory will raise a runtime error."
                }
            },
            "type": "object",
            "markdownDescription": "The source path."
        },
        "TaskSchema": {
            "title": "Task",
            "description": "A generator task.",
            "type": "object",
            "oneOf": [
                {
                    "$ref": "#/definitions/CreateTask"
                },
                {
                    "$ref": "#/definitions/DeleteTask"
                },
                {
                    "$ref": "#/definitions/GeneratorTask"
                },
                {
                    "$ref": "#/definitions/UpdateTask"
                }
            ],
            "markdownDescription": "A generator task."
        },
        "UpdateAction": {
            "title": "Action",
            "description": "The action to perform on the destination.",
            "additionalProperties": false,
            "properties": {
                "merge": {
                    "$ref": "#/definitions/MergeType",
                    "title": "Merge",
                    "default": "concat"
                },
                "type": {
                    "$ref": "#/definitions/Action",
                    "title": "Type",
                    "default": "replace"
                }
            },
            "type": "object",
            "markdownDescription": "The action to perform on the destination."
        },
        "UpdateMatch": {
            "title": "Match",
            "description": "Target a subset of the destination to update.",
            "additionalProperties": false,
            "properties": {
                "default": {
                    "title": "Default",
                    "description": "A default value to use if the JSON path expression is not found.",
                    "markdownDescription": "A default value to use if the JSON path expression is not found."
                },
                "pattern": {
                    "title": "Pattern",
                    "description": "A regexp (content_type: text) or JSON path expression (content_type: json, yaml). When empty, will match everything.",
                    "default": "",
                    "type": "string",
                    "markdownDescription": "A regexp (content_type: text) or JSON path expression (content_type: json, yaml). When empty, will match everything."
                },
                "source": {
                    "$ref": "#/definitions/MatchSource",
                    "title": "Source",
                    "default": "line"
                }
            },
            "type": "object",
            "markdownDescription": "Target a subset of the destination to update."
        },
        "UpdateTask": {
            "title": "UpdateTask",
            "description": "Updates a file in the destination directory.",
            "required": [
                "dst",
                "src",
                "type"
            ],
            "additionalProperties": false,
            "properties": {
                "action": {
                    "$ref": "#/definitions/UpdateAction",
                    "title": "Action"
                },
                "description": {
                    "title": "Description",
                    "description": "An optional description of what is being updated.",
                    "type": "string",
                    "markdownDescription": "An optional description of what is being updated."
                },
                "dst": {
                    "$ref": "#/definitions/Destination",
                    "title": "Destination"
                },
                "each": {
                    "title": "Each",
                    "description": "Set to a comma separated value and the task will be executued once per-item. On each iteration, the `_Item` and `_Index` values will be set accordingly.",
                    "examples": [
                        "foo, bar, baz",
                        "{{ .SomeList | join \",\" }}"
                    ],
                    "type": "string",
                    "markdownDescription": "Set to a comma separated value and the task will be executued once per-item. On each iteration, the `_Item` and `_Index` values will be set accordingly."
                },
                "if": {
                    "title": "If",
                    "description": "Determines whether the task should be executed. The value must be [coercible](https://pkg.go.dev/strconv#ParseBool) to a boolean.",
                    "default": "true",
                    "examples": [
                        "0",
                        "true",
                        "{{ .SomeBool }}"
                    ],
                    "type": "string",
                    "markdownDescription": "Determines whether the task should be executed. The value must be [coercible](https://pkg.go.dev/strconv#ParseBool) to a boolean."
                },
                "match": {
                    "$ref": "#/definitions/UpdateMatch",
                    "title": "Match"
                },
                "src": {
                    "$ref": "#/definitions/Source",
                    "title": "Source"
                },
                "type": {
                    "title": "Type",
                    "description": "Updates a file in the destination directory.",
                    "const": "update",
                    "type": "string",
                    "markdownDescription": "Updates a file in the destination directory."
                }
            },
            "type": "object",
            "markdownDescription": "Updates a file in the destination directory."
        },
        "Value": {
            "title": "Value",
            "description": "A generator input value.",
            "additionalProperties": false,
            "properties": {
                "default": {},
                "flag": {
                    "type": "string"
                },
                "help": {
                    "type": "string"
                },
                "if": {
                    "default": "true",
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/InputMode",
                    "default": "flag"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "default": [],
                    "items": {},
                    "type": [
                        "array",
                        "null"
                    ]
                },
                "prompt": {
                    "$ref": "#/definitions/PromptConfig",
                    "default": "on-unset"
                },
                "transform": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/DataType",
                    "default": "string"
                },
                "validate": {
                    "type": "string"
                }
            },
            "type": "object",
            "markdownDescription": "A generator input value."
        }
    },
    "properties": {
        "description": {
            "title": "Description",
            "description": "The generator description. The first line is shown when listing all generators. The full description is used when viewing generator help/usage text.",
            "type": "string",
            "markdownDescription": "The generator description. The first line is shown when listing all generators. The full description is used when viewing generator help/usage text."
        },
        "name": {
            "title": "Name",
            "description": "The generator name.",
            "minLength": 1,
            "pattern": "^[\\w:_-]+$",
            "type": "string",
            "markdownDescription": "The generator name."
        },
        "tasks": {
            "title": "Tasks",
            "description": "A list of generator tasks.",
            "items": {
                "$ref": "#/definitions/TaskSchema"
            },
            "type": [
                "array",
                "null"
            ],
            "markdownDescription": "A list of generator tasks."
        },
        "values": {
            "title": "Values",
            "description": "A list of generator input values.",
            "items": {
                "$ref": "#/definitions/Value"
            },
            "type": [
                "array",
                "null"
            ],
            "markdownDescription": "A list of generator input values."
        }
    },
    "type": "object",
    "markdownDescription": "Stamp generator metadata."
}
